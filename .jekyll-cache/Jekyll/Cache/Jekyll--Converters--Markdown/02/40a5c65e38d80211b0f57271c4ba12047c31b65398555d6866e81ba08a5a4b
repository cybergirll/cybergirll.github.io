I"$<h2 id="background">Background</h2>

<p>SQLI attacks can have many different goals.</p>

<ul>
  <li>
    <p>Explore application or database structure</p>
  </li>
  <li>
    <p>Authentication</p>
  </li>
  <li>Circumvent application logins</li>
  <li>
    <p>Extract data</p>
  </li>
  <li>Usernames</li>
  <li>Passwords</li>
  <li>Identity information</li>
  <li>Credit card details</li>
  <li>
    <p>Modify data</p>
  </li>
  <li>Alter orders or transactions</li>
  <li>Escalate permissions</li>
  <li>
    <p>Erase data</p>
  </li>
  <li>Sabotage</li>
</ul>

<p><img src="/img/posts/programmer_eye.jpg" alt="IMDb page" /></p>

<h2 id="illustration-of-sql-injection-sqli">Illustration of SQL Injection (SQLI)</h2>

<p>Picture a login form. Upon form submission, the application code assembles an SQL query to look for a corresponding username and password in the users table. (Let’s assume the code encrypts the password; it should never be stored in plain text!)</p>

<p>```javascript
&lt;?php
  $username = “marymartin”;
  $password = “love74bug”;</p>

<p>$sql = “SELECT * FROM users “;
  $sql .= “WHERE username=’{$username}’ “;
  $sql .= “AND password=’{$encrypted_pwd}’”;</p>

<p>// SELECT * FROM users WHERE username=’marymartin’ AND password=’(encrypted)’
?&gt;```</p>
:ET