I"Â<h2 id="background">Background</h2>

<p>SQLI attacks can have many different goals.</p>

<ul>
  <li>
    <p>Explore application or database structure</p>
  </li>
  <li>
    <p>Authentication</p>
  </li>
  <li>Circumvent application logins</li>
  <li>
    <p>Extract data</p>
  </li>
  <li>Usernames</li>
  <li>Passwords</li>
  <li>Identity information</li>
  <li>Credit card details</li>
  <li>
    <p>Modify data</p>
  </li>
  <li>Alter orders or transactions</li>
  <li>Escalate permissions</li>
  <li>
    <p>Erase data</p>
  </li>
  <li>Sabotage</li>
</ul>

<p><img src="/img/posts/programmer_eye.jpg" alt="IMDb page" /></p>

<h2 id="illustration-of-sql-injection-sqli">Illustration of SQL Injection (SQLI)</h2>

<p>Picture a login form. Upon form submission, the application code assembles an SQL query to look for a corresponding username and password in the users table. (Let‚Äôs assume the code encrypts the password; it should never be stored in plain text!)</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="p">?</span><span class="nx">php</span>
  <span class="nx">$username</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">marymartin</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">$password</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">love74bug</span><span class="dl">"</span><span class="p">;</span>

  <span class="nx">$sql</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">SELECT * FROM users </span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">$sql</span> <span class="p">.</span><span class="o">=</span> <span class="dl">"</span><span class="s2">WHERE username='{$username}' </span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">$sql</span> <span class="p">.</span><span class="o">=</span> <span class="dl">"</span><span class="s2">AND password='{$encrypted_pwd}'</span><span class="dl">"</span><span class="p">;</span>

  <span class="c1">// SELECT * FROM users WHERE username='marymartin' AND password='(encrypted)'</span>
<span class="p">?</span><span class="o">&gt;</span>
</code></pre></div></div>
<p>A hacker visits the login form and, instead of providing a username, submits an carefully-crafted string in its place.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="p">?</span><span class="nx">php</span>
  <span class="nx">$username</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">sqli' OR 1=1; --</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">$password</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>

  <span class="c1">// SELECT * FROM users WHERE username='sqli' OR 1=1; --' AND password=''</span>
<span class="p">?</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>Examine the generated SQL meticulously. Observe that the string is designed to terminate the single-quote, effectively ‚Äúbreaking out‚Äù of the intended input value. <code class="language-plaintext highlighter-rouge">OR 1=1</code> will invariably evaluate to true, and <code class="language-plaintext highlighter-rouge">--</code> signifies the initiation of a comment in SQL. Consequently, the query will match all users, and the password clause will be disregarded. This SQL Injection (SQLI) attack has the potential to circumvent the login page and gain unauthorized access.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="p">?</span><span class="nx">php</span>
  <span class="c1">// The application code</span>
  <span class="nx">$sql</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">SELECT * FROM products WHERE name='{$name}'</span><span class="dl">"</span><span class="p">;</span>

  <span class="c1">// Possible values for $name:</span>

  <span class="c1">// Uses UNION to join the results to a new query</span>
  <span class="nx">$name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Robert' UNION SELECT username, password FROM users; --</span><span class="dl">"</span><span class="p">;</span>

  <span class="c1">// Piggybacks an INSERT statement to add an admin record</span>
  <span class="nx">$name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Robert'; INSERT INTO admins (username, password)
                    VALUES ('hacker', 'secret'); --</span><span class="dl">"</span><span class="p">;</span>

  <span class="c1">// Piggybacks a DROP TABLE statement to destroy data</span>
  <span class="nx">$name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Robert'; DROP TABLE students; --</span><span class="dl">"</span><span class="p">;</span>
<span class="p">?</span><span class="o">&gt;</span>
</code></pre></div></div>

:ET