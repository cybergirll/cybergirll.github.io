I"<h2 id="background">Background</h2>
<p>Cross-Site Scripting (XSS) arises when code incorporates user-supplied data into the response without adequately sanitizing it beforehand. Named for the capability it grants attackers to execute JavaScript on someone else’s site, Cross-Site Scripting is commonly referred to as “XSS.”</p>

<p>This vulnerability holds the #3 position on OWASP’s list of Top 10 security threats and stands out as the most prevalent flaw in web application security.</p>

<p>Various methods enable hackers to inject JavaScript into a page, contingent on the output of unsanitized incoming data. Once the hacker successfully embeds their JavaScript within the page response, the script executes, typically unbeknownst to the unsuspecting user. The script can carry out a range of actions, including pilfering site cookies or session data. This exploit works because the browser inherently trusts all JavaScript provided with the page.</p>

<p><img src="/img/posts/XSS-blog.jpg" alt="IMDb page" /></p>

<h2 id="reflected-cross-site-scripting-xss-vulnerability">Reflected Cross-Site Scripting (XSS) Vulnerability</h2>

<p>Reflected Cross-Site Scripting (XSS) occurs when a script executes directly in the victim’s browser. The JavaScript in question is typically embedded in the URL data or form data. The term “reflected” is used because the script rebounds immediately. In a carefully orchestrated attack, the user may not even detect that the script has executed.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">No</span> <span class="nx">results</span> <span class="nx">were</span> <span class="nx">found</span> <span class="k">for</span><span class="p">:</span> <span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span><span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">XSS!</span><span class="dl">'</span><span class="p">);</span><span class="o">&lt;</span><span class="sr">/script&gt;&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</code></pre></div></div>
<h2 id="xss-using-an-html-attribute">XSS using an HTML attribute</h2>

<p>Here’s another illustration involving a login form. Take note that the username text input will be filled with the value of <code class="language-plaintext highlighter-rouge">$username</code>, if available. In the event of a failed login attempt, the entered username will be retained in the form, allowing the user to make another attempt with a new password.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--</span> <span class="nx">login</span><span class="p">.</span><span class="nx">php</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">username</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">&lt;?php echo $username; ?&gt;</span><span class="dl">"</span> <span class="o">/&gt;&lt;</span><span class="nx">br</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">""</span> <span class="o">/&gt;</span>
</code></pre></div></div>

<p>A malicious actor inputs the subsequent username and password, then proceeds to submit the form.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2"> /&gt;&lt;script&gt;alert('XSS!');&lt;/script&gt;
password:
</span></code></pre></div></div>
<p>The login will fail and the form will be shown again with the hacker’s code inserted.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--</span> <span class="nx">login</span><span class="p">.</span><span class="nx">php</span> <span class="o">--&gt;</span>
<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">username</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">""</span> <span class="o">/&gt;&lt;</span><span class="nx">script</span><span class="o">&gt;</span><span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">XSS!</span><span class="dl">'</span><span class="p">);</span><span class="o">&lt;</span><span class="sr">/script&gt;" /</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">""</span> <span class="o">/&gt;</span>
</code></pre></div></div>

:ET